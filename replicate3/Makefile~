# Alignment reference
AREF=../Genome

# Main directories
HUMAN_DIR=../Human_DNA
LIST_DIR=../Listeria_RNA
MIT_DIR=../Mitocondrial_DNA
CONTROL_DIR=../control.vs
REPLICATE_DIR=.

READS_DIR =/home/data/reads
BOWTIE_DIR=/home/data/joanacruz/bowtie2-2.0.0-beta7
SCRIPT_DIR=../Scripts
PLOTM_DIR=../Scripts/Graphics

## Auxiliary directories
# Results
TRIM_DIR=$(HUMAN_DIR)/trim
SORTED_DIR=$(REPLICATE_DIR)/alignsort
PAIRED_DIR=$(REPLICATE_DIR)/paired_reads
COUNTS_DIR=$(HUMAN_DIR)/counts
COUNTS_CONTROL_DIR=$(CONTROL_DIR)/counts
COUNTS_REP_DIR=$(REPLICATE_DIR)/counts
DESEQ_DIR=$(REPLICATE_DIR)/DESeq
GO_DIR=$(REPLICATE_DIR)/GOStats
WEB_DIR=$(REPLICATE_DIR)/web.site


# Graphics
PLOT_DIR=$(REPLICATE_DIR)/Plots.sem.lim
PLOT_DESEQ=$(PLOT_DIR)/DESeq.analysis
PLOT_GO=$(PLOT_DIR)/Genes.expression

GTF_FILE := $(AREF)/hg19_refseq.gtf

all: gostats

gostats: $(addprefix $(GO_DIR)/GOsummary_, $(notdir $(subst _L1_1.fq.gz,.csv.gz, $(wildcard $(READS_DIR)/LM*_L1_1.fq.gz)))))

deseq: $(addprefix $(DESEQ_DIR)/DESeq_, $(notdir $(subst L1_1.fq.gz,pvalue.csv.gz, $(wildcard $(READS_DIR)/LM*_L1_1.fq.gz))))

concatenate: $(addprefix $(COUNTS_REP_DIR)/,$(notdir $(subst _L1_1.fq.gz,_control.txt.gz, $(wildcard $(READS_DIR)/LM*_L1_1.fq.gz))))

counts: $(addprefix $(COUNTS_REP_DIR)/, $(notdir $(subst _1.fastq.gz,.txt.gz, $(wildcard $(REPLICATE_DIR)/*_1.fastq.gz))))

paired: $(addprefix $(PAIRED_DIR)/, $(notdir $(subst _1.fastq.gz,_paired.sam.gz, $(wildcard $(REPLICATE_DIR)/*_1.fastq.gz))))

sort: $(addprefix $(SORTED_DIR)/, $(notdir $(subst _1.fastq.gz,_sorted.sam.gz, $(wildcard $(REPLICATE_DIR)/*_1.fastq.gz)))))


## Sort the SAM file by read name (to use in HTSeq)
# Convert .bam sorted to .sam
$(SORTED_DIR)/%_sorted.sam.gz : $(SORTED_DIR)/%_sorted.bam
	@ samtools view $(SORTED_DIR)/$*_sorted.bam -h > $(SORTED_DIR)/$*_sorted.sam
	@ gzip $(SORTED_DIR)/$*_sorted.sam
	@ echo "SAM file sorted."
# Convert .sam to .bam and sort
$(SORTED_DIR)/%_sorted.bam : $(SORTED_DIR)/%.sam.gz
	@ samtools view -bS $(SORTED_DIR)/$*.sam.gz | samtools sort -n - $(SORTED_DIR)/$*_sorted

# Make sequences alignment with the human genome (using Bowtie2 with --sensitive option and with all paired ends that aligned written at .sam)
$(SORTED_DIR)/rep%.sam.gz :  $(REPLICATE_DIR)/rep%_1.fastq.gz $(REPLICATE_DIR)/rep%_2.fastq.gz | $(SORTED_DIR)/.d
	$(BOWTIE_DIR)/bowtie2 -x $(AREF)/hg19 --sensitive -1 $(REPLICATE_DIR)/rep$*_1.fastq.gz -2 $(REPLICATE_DIR)/rep$*_2.fastq.gz | gzip > $(SORTED_DIR)/rep$*.sam.gz
	@ echo "Alignment done."


# Filter paired end reads which only one align
$(PAIRED_DIR)/%_paired.sam.gz : $(SORTED_DIR)/%_sorted.sam.gz | $(PAIRED_DIR)/.d
	@ python $(SCRIPT_DIR)/paired_end.py $(SORTED_DIR)/ $* $(PAIRED_DIR)/
	@ echo "Reads filtered."
	
	
# Uses HTSeq-count script to count how many reads map to each feature (being a feature a range of positions on a chromosome)
$(COUNTS_REP_DIR)/%.txt.gz : $(PAIRED_DIR)/%_paired.sam.gz $(COUNTS_REP_DIR)/.d
	@ gunzip $(PAIRED_DIR)/$*_paired.sam.gz 
	@ python -m HTSeq.scripts.count -m union -s no -i gene_id $(PAIRED_DIR)/$*_paired.sam $(AREF)/hg19_refseq.gtf | gzip > $(COUNTS_REP_DIR)/$*.txt.gz
	@ gzip $(PAIRED_DIR)/$*_paired.sam

	
# concatenate all controls from public data with our control (one single file) & concatenate each public control with each other (to compare similarty between public controls)
$(COUNTS_REP_DIR)/ALL_rep_Control.txt.gz :
	@ gunzip $(COUNTS_DIR)/Control_HeLa_L1.txt.gz  $(COUNTS_REP_DIR)/rep*_Control_HeLa_L1.txt.gz
	@ paste $(COUNTS_DIR)/Control_HeLa_L1.txt $(COUNTS_REP_DIR)/rep1_Control_HeLa_L1.txt $(COUNTS_REP_DIR)/rep2_Control_HeLa_L1.txt | cut -f1,2,4,6- | sed '1 i\Control_HeLa\tControl_HeLa_rep1\tControl_HeLa_rep2' > $(COUNTS_REP_DIR)/ALL_rep_Control.txt
	@ gzip $(COUNTS_DIR)/Control_HeLa_L1.txt $(COUNTS_REP_DIR)/rep*_Control_HeLa_L1.txt $(COUNTS_REP_DIR)/ALL_rep_Control.txt


# differential analysis between public replicates: 1)different replicates 2)all public replicates and our control 3) each replicate with our control
deseq-replicate : $(DESEQ_DIR)/DESeq_rep1.vs.rep2_pvalue.csv.gz $(DESEQ_DIR)/DESeq_public_rep.vs.control_pvalue.csv.gz $(DESEQ_DIR)/DESeq_rep1.vs.control_pvalue.csv.gz $(DESEQ_DIR)/DESeq_rep2.vs.control_pvalue.csv.gz


 $(DESEQ_DIR)/DESeq_rep1.vs.rep2_pvalue.csv.gz $(DESEQ_DIR)/DESeq_public_rep.vs.control_pvalue.csv.gz $(DESEQ_DIR)/DESeq_rep1.vs.control_pvalue.csv.gz $(DESEQ_DIR)/DESeq_rep2.vs.control_pvalue.csv.gz: $(COUNTS_REP_DIR)/ALL_rep_Control.txt.gz $(DESEQ_DIR)/.d
	@ gunzip $(COUNTS_REP_DIR)/ALL_rep_Control.txt.gz
	@ Rscript $(SCRIPT_DIR)/DEseq_replicate7.R $(COUNTS_REP_DIR)/ALL_rep_Control.txt $(DESEQ_DIR)/
	@ gzip $(DESEQ_DIR)/DESeq_* $(COUNTS_REP_DIR)/ALL_rep_Control.txt
	
plot-deseq : $(DESEQ_DIR)/DESeq_rep4.1.vs.rep4.2_ALL.csv.gz $(DESEQ_DIR)/DESeq_rep4.vs.control_ALL.csv.gz $(DESEQ_DIR)/DESeq_rep4.1.vs.control_ALL.csv.gz $(DESEQ_DIR)/DESeq_rep4.2.vs.control_ALL.csv.gz $(PLOT_DIR)/.d
	@ gunzip $(DESEQ_DIR)/DESeq_*_ALL.csv.gz
	@ Rscript $(SCRIPT_DIR)/analysis.deseq.rep.R $(DESEQ_DIR)/ $(PLOT_DIR)/
	@ gzip  $(DESEQ_DIR)/DESeq_*_ALL.csv


# Create a directory (use DIR/.d)
%/.d:
	@ mkdir -p $(@D)
	@ touch $@

